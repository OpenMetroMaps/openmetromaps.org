buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://mvn.topobyte.de' }
    }
    dependencies {
        classpath 'com.magnetichq:client-dependencies-g7:2.0.0'
        classpath 'de.topobyte:gradle-generate-favicons-plugin:0.0.3'
        classpath 'de.topobyte:gradle-cache-busting-plugin:0.0.5'
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '4.0.0' apply false
}

wrapper {
    gradleVersion = '7.6.1'
}

allprojects {
    group = pGroup
    version = pVersion
}

subprojects {
    repositories {
        maven {
            url 'https://mvn.topobyte.de'
        }
        mavenCentral()
    }
}

project(':openmetromaps-core') {
    apply plugin: 'java-library'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'io.franzbecker.gradle-lombok'
}

project(':openmetromaps-dynamic') {
    apply plugin: 'war'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'io.franzbecker.gradle-lombok'
    apply plugin: 'com.magnetichq.client-dependencies'
    apply plugin: 'de.topobyte.generate-favicons-gradle-plugin'
    apply plugin: 'de.topobyte.cache-busting-gradle-plugin'
}

subprojects {
    lombok {
        version = '1.18.24'
        sha256 = ''
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

project(':openmetromaps-core') {
    dependencies {
        api 'de.topobyte:jsoup-elements:0.2.1'
        api 'de.topobyte:jsoup-bootstrap4:1.4.0'
        api 'de.topobyte:jsoup-utils:0.2.1'
        api 'de.topobyte:webpaths-core:0.0.4'
        api 'de.topobyte:pagegen-core:1.2.2'
        api 'de.topobyte:pagegen-bootstrap:1.3.0'
        api 'commons-io:commons-io:2.4'

        testImplementation 'junit:junit:4.12'
    }
}

project(':openmetromaps-dynamic') {
    dependencies {
        implementation project(':openmetromaps-core')

        implementation 'de.topobyte:system-utils:0.0.1'
        implementation 'de.topobyte:jsoup-servlet:0.2.0'
        implementation 'de.topobyte:jsoup-utils:0.2.1'
        implementation 'de.topobyte:jsoup-flexmark:0.1.1'
        implementation 'de.topobyte:servlet-utils:0.0.2'
        implementation 'de.topobyte:jsoup-feather:1.2.0'

        providedCompile 'javax.servlet:javax.servlet-api:3.+'
        providedCompile 'javax.servlet.jsp:jsp-api:2.1'

        implementation 'org.slf4j:slf4j-api:1.7.20'
        implementation 'ch.qos.logback:logback-classic:1.2.3'
    }
}

project(':openmetromaps-dynamic') {
    favicons {
        input = 'res/images/icon.svg'
    }
}

project(':openmetromaps-dynamic') {
    eclipse {
        wtp {
            component {
                contextPath = '/'
                deployName = 'openmetromaps'
                resource deployPath: '/', sourcePath: 'src/main/webapp'
                resource deployPath: '/', sourcePath: 'build/static'
                resource deployPath: '/', sourcePath: 'res-nohash'
            }
        }
    }
    eclipse.classpath.file {
        withXml {
            def node = it.asNode()
            node.appendNode('classpathentry', [kind: 'src', output: 'bin/main', path: 'logging/devel'])
            node.appendNode('classpathentry', [kind: 'src', output: 'bin/main', path: 'config/devel'])
        }
        // Classpath entry for Eclipse which changes the order of classpathentries; otherwise no sources for 3rd party jars are shown
        withXml { xml ->
            def node = xml.asNode()
            node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
            node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
        }
    }

    clientDependencies {
        installDir = 'src/assets/vendor/client'
        copyExcludes = ['**/*.map', '**/Gruntfile.js', 'gulpfile.js', 'source/**']
        yarn {
            'jquery'('3.5.1')
            'bootstrap'('4.5.0')
        }
    }

    def commonWarDefs = {
        from 'res'
        from ('src/assets/vendor') {
            into 'client'
        }
        from 'build/favicons'
    }

    war {
        classifier = 'production'
        configure commonWarDefs
    }

    [war].each { task ->
        task.dependsOn clientInstall
        task.dependsOn generateFavicons
        task.from ('logging/' + task.archiveClassifier.get()) {
            into('WEB-INF/classes')
            include "**/*"
        }
        task.from ('config/' + task.archiveClassifier.get()) {
            into('WEB-INF/classes')
            include "**/*"
        }
    }

    tasks.eclipse.dependsOn clientInstall
    tasks.eclipse.dependsOn generateFavicons

    tasks.generateStaticFiles.dependsOn generateFavicons

    cacheBusting {
        input = []
        input += 'res'
        input += 'build/favicons'
        input += 'src/assets/vendor'
    }
}
